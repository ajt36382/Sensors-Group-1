import serial
import numpy as np
import cv2
import time

# --- Configuration ---
SERIAL_PORT = '/dev/ttyUSB0'  # Replace with your port, e.g., 'COM3' on Windows.
BAUD_RATE = 250000            # Must match the Arduino's baud rate.
FRAME_ROWS = 24
FRAME_COLS = 32
TOTAL_PIXELS = FRAME_ROWS * FRAME_COLS

# Temperature threshold for detecting warm objects (in Â°C)
WARM_THRESHOLD = 30.0

def parse_frame(line):
    """
    Convert a CSV line of thermal data into a numpy array (shape: FRAME_ROWS x FRAME_COLS).
    Expected format: "23.45,24.12,25.67,..."
    """
    try:
        values = line.strip().split(',')
        # Remove any empty strings (could be from a trailing comma)
        values = [v for v in values if v]
        if len(values) != TOTAL_PIXELS:
            print(f"Warning: Expected {TOTAL_PIXELS} values, got {len(values)}. Skipping frame.")
            return None
        data = np.array([float(v) for v in values])
        frame = data.reshape((FRAME_ROWS, FRAME_COLS))
        return frame
    except Exception as e:
        print("Error parsing frame:", e)
        return None

def display_thermal_frame(frame, boxes=None):
    """
    Normalize the thermal frame to an 8-bit image, apply a colormap,
    and optionally draw bounding boxes for detected warm objects.
    """
    norm_frame = cv2.normalize(frame, None, 0, 255, cv2.NORM_MINMAX).astype(np.uint8)
    colored_frame = cv2.applyColorMap(norm_frame, cv2.COLORMAP_JET)

    if boxes is not None:
        for (x, y, w, h) in boxes:
            cv2.rectangle(colored_frame, (x, y), (x+w, y+h), (255, 255, 255), 1)

    # Resize for better viewing
    resized = cv2.resize(colored_frame, (FRAME_COLS * 10, FRAME_ROWS * 10), interpolation=cv2.INTER_NEAREST)
    cv2.imshow("Thermal Camera", resized)

def detect_warm_objects(frame, threshold=WARM_THRESHOLD):
    """
    Detect warm objects via thresholding the frame.
    Returns the binary mask and a list of bounding boxes for detected regions.
    """
    # Create a binary mask where pixels above the threshold are white (255).
    binary_mask = np.uint8((frame > threshold) * 255)

    # Optionally display the binary mask (scaled up for visualization)
    mask_upscaled = cv2.resize(binary_mask, (FRAME_COLS * 10, FRAME_ROWS * 10), interpolation=cv2.INTER_NEAREST)
    cv2.imshow("Binary Mask", mask_upscaled)

    contours, _ = cv2.findContours(binary_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    boxes = []
    for cnt in contours:
        if cv2.contourArea(cnt) > 3:  # Filter out noise; adjust as needed.
            x, y, w, h = cv2.boundingRect(cnt)
            boxes.append((x, y, w, h))
    return binary_mask, boxes

def main():
    try:
        ser = serial.Serial(SERIAL_PORT, BAUD_RATE, timeout=1)
    except Exception as e:
        print("Could not open serial port:", e)
        return

    print("Started reading thermal frames from Arduino...")

    # Variables for tracking speed
    prev_centroid = None
    prev_time = None

    while True:
        try:
            # Read one line from serial
            line = ser.readline().decode('utf-8')
            if not line:
                continue

            frame = parse_frame(line)
            if frame is None:
                continue

            # Detect warm objects in the frame.
            binary_mask, boxes = detect_warm_objects(frame, WARM_THRESHOLD)

            # If objects were detected, select the largest bounding box to track.
            speed_info = ""
            if boxes:
                largest_box = max(boxes, key=lambda box: box[2] * box[3])
                # Compute centroid of the bounding box (in sensor image coordinates)
                cx = largest_box[0] + largest_box[2] / 2
                cy = largest_box[1] + largest_box[3] / 2
                current_centroid = (cx, cy)
                current_time = time.time()
                if prev_centroid is not None and prev_time is not None:
                    dt = current_time - prev_time
                    dx = current_centroid[0] - prev_centroid[0]
                    dy = current_centroid[1] - prev_centroid[1]
                    displacement = np.sqrt(dx**2 + dy**2)
                    # Calculate speed (in pixels per second)
                    speed = displacement / dt if dt > 0 else 0
                    speed_info = f"Speed: {speed:.2f} pixels/sec"
                    print(speed_info)
                else:
                    current_time = time.time()
                # Update previous values for the next iteration
                prev_centroid = current_centroid
                prev_time = current_time

            # Draw bounding boxes on the thermal image.
            display_thermal_frame(frame, boxes)

            # Optionally, overlay speed info on the displayed frame.
            # Here, we write the speed info on the top-left corner.
            if speed_info:
                # Get the current displayed image from the window (for overlay)
                # Instead, we can write directly on the frame before resizing.
                norm_frame = cv2.normalize(frame, None, 0, 255, cv2.NORM_MINMAX).astype(np.uint8)
                colored_frame = cv2.applyColorMap(norm_frame, cv2.COLORMAP_JET)
                cv2.putText(colored_frame, speed_info, (5, 20), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
                # Resize and then show with overlay
                resized = cv2.resize(colored_frame, (FRAME_COLS * 10, FRAME_ROWS * 10), interpolation=cv2.INTER_NEAREST)
                cv2.imshow("Thermal Camera", resized)

            # Exit on 'q' key press.
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

        except KeyboardInterrupt:
            print("Exiting...")
            break
        except Exception as e:
            print("Error:", e)
            continue

    ser.close()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
