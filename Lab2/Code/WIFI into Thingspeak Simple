#include "ThingSpeak.h"
#include "WiFi.h"
#include "esp_eap_client.h"

#define EAP_IDENTITY ""
#define EAP_USERNAME ""
#define EAP_PASSWORD ""
#define MAX_DISCONNECTS 4
const char* ssid = "PAWS-Secure";
unsigned char disconnectNum = 0;
WiFiClient client;

// Use for writing to thingspeak
#define THINGSPEAK_WRITE_KEY "J4LPGH2C51G60CND"
#define CHANNEL_NAME 2648769
unsigned long prev_millis = 0;
int counter = 0;

/**
* @brief Executes when a WiFi connection event occurs.
*
* @param event WiFi connection event.
*/
void WiFiStationConnected(WiFiEvent_t event) {
  Serial.println("Connected to AP successfully!");
}

/**
* @brief Executes when an IP assignment event occurs.
*
* @param event IP assignment event
*/
void WiFiGotIP(WiFiEvent_t event) {
  Serial.println("WiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

/**
* @brief Executes when a WiFi disconnection event occurs, automatically reconnects.
*
* @param event WiFi disconnection event
*/
void WiFiStationDisconnected(WiFiEvent_t event) {
  Serial.println("Disconnected from WiFi access point");
  Serial.print("WiFi lost connection. Trying to reconnect...");
  if (disconnectNum < MAX_DISCONNECTS) {
    Serial.print("Attempt #");
    Serial.println(disconnectNum + 1);
    WiFi.begin(ssid, WPA2_AUTH_PEAP, EAP_IDENTITY, EAP_USERNAME, EAP_PASSWORD);
    delay(30000);  // 30-second retry
  } else {
    Serial.println("Max reconnect attempts reached. Restarting...");
    ESP.restart();  // Restart the ESP32 after max retries
  }
  disconnectNum++;
}

/**
* @brief Sets up WiFi connection.
*
*/
void wifiSetup() {
  // Removes previous WiFi config if any
  WiFi.disconnect(true);

  // Sets events and functions to be called when events occur
  WiFi.onEvent(WiFiStationConnected, ARDUINO_EVENT_WIFI_STA_CONNECTED);
  WiFi.onEvent(WiFiGotIP, ARDUINO_EVENT_WIFI_STA_GOT_IP);
  WiFi.onEvent(WiFiStationDisconnected, ARDUINO_EVENT_WIFI_STA_DISCONNECTED);

  // Sets WiFi mode to STA, a device that can use 802.11 WiFi protocol
  WiFi.mode(WIFI_STA);
  
  // Begin WiFi connection using the credentials provided
  Serial.println("Attempting to connect to WiFi...");
  WiFi.begin(ssid, WPA2_AUTH_PEAP, EAP_IDENTITY, EAP_USERNAME, EAP_PASSWORD);
  
  // Wait for the connection to complete
  int status = WiFi.waitForConnectResult();
  if (status != WL_CONNECTED) {
    Serial.println("Connection failed, retrying...");
  } else {
    Serial.println("Connected to WiFi successfully!");
  }

  // Initializes Thingspeak
  ThingSpeak.begin(client);
}

















void setup() {
  // Begins Serial
  Serial.begin(115200);

  // Begins WiFi setup
  wifiSetup();
  // Initialize prev_millis
  prev_millis = millis();
  }



  void loop() {

  // You can add more functionality here, for example, sending data to ThingSpeak
  // or managing the timing between actions
  counter++;
  ThingSpeak.writeField(CHANNEL_NAME, 1, counter, THINGSPEAK_WRITE_KEY);
  delay(1000);
}
