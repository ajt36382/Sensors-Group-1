#include <Wire.h>
#include <MPU6050.h>
#include <math.h>
#include <PulseSensorPlayground.h>
#include "ThingSpeak.h"
#include "WiFi.h"
#include "esp_eap_client.h"

// ====== Wi-Fi Enterprise Credentials ======
#define EAP_IDENTITY "ajt36382"
#define EAP_USERNAME "ajt36382"
#define EAP_PASSWORD "ATuck4000!?"
#define MAX_DISCONNECTS 4
const char* ssid = "PAWS-Secure";
unsigned char disconnectNum = 0;
WiFiClient client;
#define THINGSPEAK_WRITE_KEY "XH8UFOIIJTKBI7ZA"
#define CHANNEL_NAME 2648769

// ====== Kalman Filter / Thermistor Variables ======
float temperatureEstimate = 20.0;
float temperatureVariance = 1.0;
float processNoise = 0.5;
float measurementNoise = 1.8;
const int analogPin = 36;
float constant = exp(-3636 / 298.15);
float knownResistor = 820.0;
float supplyVoltage = 3.3;

// ====== MPU6050 ======
MPU6050 mpu;
int16_t ax, ay, az;
int16_t gx, gy, gz;

// ====== PulseSensor ======
const int PulseWire = 39;
int Threshold = 550;
PulseSensorPlayground pulseSensor;

// ====== Tracking Variables ======
int counter = 0;
unsigned long lastCounterTime = 0;
const unsigned long interval = 15000;
unsigned long tempStartTime = 0;
const unsigned long tempTrackDuration = 60000;
float recordedTemperature = 0.0;
bool temperatureThresholdSet = false;
float temperatureThreshold = 0.0;

unsigned long heartRateStartTime = 0;
const unsigned long heartRateTrackDuration = 60000;
int heartRate = 0;
int recordedHeartRate = 0;
bool heartRateThresholdSet = false;
int heartRateThreshold = 0;

unsigned long prev_millis = 0;

// ====== WiFi Event Handlers ======
void WiFiStationConnected(WiFiEvent_t event) {
  Serial.println("Connected to AP successfully!");
}

void WiFiGotIP(WiFiEvent_t event) {
  Serial.println("WiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

void WiFiStationDisconnected(WiFiEvent_t event) {
  Serial.println("Disconnected from WiFi. Reconnecting...");
  if (disconnectNum < MAX_DISCONNECTS) {
    Serial.print("Attempt #");
    Serial.println(disconnectNum + 1);
    WiFi.begin(ssid, WPA2_AUTH_PEAP, EAP_IDENTITY, EAP_USERNAME, EAP_PASSWORD);
    delay(30000);
  } else {
    Serial.println("Max retries reached. Restarting...");
    ESP.restart();
  }
  disconnectNum++;
}

// ====== WiFi Setup ======
void wifiSetup() {
  WiFi.disconnect(true);
  WiFi.onEvent(WiFiStationConnected, ARDUINO_EVENT_WIFI_STA_CONNECTED);
  WiFi.onEvent(WiFiGotIP, ARDUINO_EVENT_WIFI_STA_GOT_IP);
  WiFi.onEvent(WiFiStationDisconnected, ARDUINO_EVENT_WIFI_STA_DISCONNECTED);
  WiFi.mode(WIFI_STA);

  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, WPA2_AUTH_PEAP, EAP_IDENTITY, EAP_USERNAME, EAP_PASSWORD);
  int status = WiFi.waitForConnectResult();
  if (status != WL_CONNECTED) {
    Serial.println("Initial WiFi connection failed.");
  } else {
    Serial.println("WiFi connected successfully.");
  }

  ThingSpeak.begin(client);
}

// ====== Setup ======
void setup() {
  Serial.begin(115200);
  wifiSetup();

  Wire.begin();
  Wire.setClock(400000);
  Serial.println("Initializing MPU6050...");
  mpu.initialize();
  if (mpu.testConnection()) {
    Serial.println("MPU6050 connection successful!");
  } else {
    Serial.println("MPU6050 connection failed!");
    while (1);
  }

  pulseSensor.analogInput(PulseWire);
  pulseSensor.setThreshold(Threshold);
  if (pulseSensor.begin()) {
    Serial.println("PulseSensor initialized.");
  }

  prev_millis = millis();
  delay(1000);
}

// ====== Main Loop ======
void loop() {
  // ===== Temperature Reading & Kalman Filter =====
  int adcValue = analogRead(analogPin);
  float voltage = (((float)(adcValue + 188) / 1296) + 0.22);
  float resistance = knownResistor * (supplyVoltage / voltage - 1);
  float temp = 3636.0 / log(resistance / (1000 * constant)) - 273.15;

  float PT = temperatureEstimate;
  float PV = temperatureVariance + processNoise;
  float kalmanGain = PV / (PV + measurementNoise);
  temperatureEstimate = PT + kalmanGain * (temp - PT) - 5;
  temperatureVariance = (1 - kalmanGain) * PV;
  Serial.print("TemperaturePrint: ");
  Serial.println(temperatureEstimate, 2);

  // ===== Temperature Tracking =====
  if (tempStartTime == 0) tempStartTime = millis();
  if (millis() - tempStartTime >= tempTrackDuration && !temperatureThresholdSet) {
    recordedTemperature = temperatureEstimate;
    temperatureThreshold = recordedTemperature;
    temperatureThresholdSet = true;
    Serial.print("Temperature threshold set: ");
    Serial.println(temperatureThreshold, 2);
  }
  if (temperatureThresholdSet) {
    Serial.println(temperatureEstimate < temperatureThreshold ? "Temperature is below the threshold." : "Temperature is above the threshold.");
  }

  // ===== Heart Rate Tracking =====
  if (heartRateStartTime == 0) heartRateStartTime = millis();
  if (millis() - heartRateStartTime >= heartRateTrackDuration && !heartRateThresholdSet) {
    recordedHeartRate = heartRate;
    heartRateThreshold = recordedHeartRate;
    heartRateThresholdSet = true;
    Serial.print("Heart rate threshold set: ");
    Serial.println(heartRateThreshold);
  }
  if (heartRateThresholdSet) {
    Serial.println(heartRate < heartRateThreshold ? "Heart rate is below the threshold." : "Heart rate is above the threshold.");
  }

  // ===== MPU6050 Motion Check =====
  mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);
  Serial.print("Gyro X: ");
  Serial.println(gx);
  if ((gx > -100 || gx < -650) && (millis() - lastCounterTime >= interval)) {
    counter++;
    lastCounterTime = millis();
    Serial.print("Gyro X exceeded threshold, counter: ");
    Serial.println(counter);
  }

  // ===== Pulse Sensor =====
  if (pulseSensor.sawStartOfBeat()) {
    heartRate = pulseSensor.getBeatsPerMinute();
    Serial.print("â™¥  BPM: ");
    Serial.println(heartRate);
  }

  // ===== Upload to ThingSpeak =====
  if (millis() - prev_millis >= 2000) {
    prev_millis = millis();
    ThingSpeak.setField(3, temperatureEstimate);
    ThingSpeak.setField(4, heartRate);
    ThingSpeak.setField(5, counter);

    int response = ThingSpeak.writeFields(CHANNEL_NAME, THINGSPEAK_WRITE_KEY);
    if (response == 200) {
      Serial.println("Data sent to ThingSpeak.");
    } else {
      Serial.print("ThingSpeak error: ");
      Serial.println(response);
    }
  }

  delay(1000);
}
