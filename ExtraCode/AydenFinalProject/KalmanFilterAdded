#include <math.h>

float temperatureEstimate = 20.0;  // Initial estimate of temperature (in Celsius)
float temperatureVariance = 1.0;  // Initial variance (uncertainty)
float processNoise = 0.5;  // Process noise (how much we trust the model)
float measurementNoise = 1.8;  // Measurement noise (sensor noise)

const int analogPin = 15; // ADC pin
float constant = exp(-3636 / 298.15);  // Constants for temperature calculation
float knownResistor = 820.0; // Resistor in the voltage divider (820 Ohms)
float supplyVoltage = 3.3; // Supply voltage (3.3V)

void setup() {
  Serial.begin(9600);
  delay(1000);
}

void loop() {
  int adcValue = analogRead(analogPin); // Read the ADC value
 float voltage = (((float)(adcValue + 188) / 1296) + 0.22); 

  // Calculate the thermistor resistance using the voltage divider formula
  float thermistorResistance = knownResistor * (supplyVoltage / voltage - 1);

  // Compute the temperature from the thermistor resistance
  float newTemperature = (float)(3636) / (log(thermistorResistance / (1000 * constant))) - 273.15;

  // Prediction Step
  float PT = temperatureEstimate;
  float PV = temperatureVariance + processNoise;

  // Kalman Gain Calculation
  float kalmanGain = PV / (PV + measurementNoise);

  // Update Step
  temperatureEstimate = PT + kalmanGain * (newTemperature - PT)-5;
  temperatureVariance = (1 - kalmanGain) * PV;

  // Output the results
 // Serial.print("Voltage: ");
 // Serial.println(voltage, 2);
 // Serial.print("Raw Temperature: ");
// Serial.println(newTemperature, 3);
  Serial.print("Filtered Temperature: ");
  Serial.println(temperatureEstimate, 3);
  
  delay(500);  // Small delay for the next reading
}
